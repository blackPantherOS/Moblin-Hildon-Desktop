---
 src/nm-device-802-11-wireless.c |   22 +++++++++++++---------
 1 file changed, 13 insertions(+), 9 deletions(-)

Index: network-manager.debian/src/nm-device-802-11-wireless.c
===================================================================
--- network-manager.debian.orig/src/nm-device-802-11-wireless.c
+++ network-manager.debian/src/nm-device-802-11-wireless.c
@@ -2876,39 +2876,37 @@
 	 * and can't handle NM scanning along with wpa_supplicant.  Which
 	 * is the case for most of them, airo in particular.
 	 */
 	caps = nm_device_get_type_capabilities (NM_DEVICE (self));
 	supports_wpa = (caps & NM_802_11_CAP_PROTO_WPA)
 				|| (caps & NM_802_11_CAP_PROTO_WPA2);
 
 	/* Use "AP_SCAN 2" if:
-	 * - The wireless network is non-broadcast or Ad-Hoc
+ 	 * - The wireless network is Ad-Hoc
 	 * - The wireless driver does not support WPA (stupid drivers...)
 	 */
 	is_adhoc = (nm_ap_get_mode(ap) == IW_MODE_ADHOC);
-	if (!nm_ap_get_broadcast (ap) || is_adhoc || !supports_wpa)
+ 	if (is_adhoc || !supports_wpa)
 		ap_scan = "AP_SCAN 2";
 
 	kernel_driver = nm_device_get_driver (NM_DEVICE (self));
 
         /*
          * We want to use "AP_SCAN 1", which tells wpa_supplicant to perform scanning.  This seems
          * to work better with some drivers.  But we want "AP_SCAN 2", telling wpa_supplicant that
          * we will do our own scanning, if
          *
          *      - The driver is orinoco_cs.  It chokes on "AP_SCAN 1".
-         *      - The AP is non-broadcast or Ad-Hoc.  Unless the driver is madwifi.
+         *      - The AP is Ad-Hoc.  Unless the driver is madwifi.
          */
         
 	if (!strcmp (kernel_driver, "orinoco_cs"))
                	ap_scan = "AP_SCAN 2";
-        else if ((!nm_ap_get_broadcast (ap) || is_adhoc) && strcmp (kernel_driver, "ath_pci"))
-               	ap_scan = "AP_SCAN 2";
-        else if (!nm_ap_get_broadcast (ap) || is_adhoc || !supports_wpa)
+        else if (is_adhoc || !supports_wpa)
 		ap_scan = "AP_SCAN 2";
 	else
                	ap_scan = "AP_SCAN 1";
 
 	kernel_driver = nm_device_get_driver (NM_DEVICE (self));
 
         /*
          * We want to use "AP_SCAN 1", which tells wpa_supplicant to perform scanning.  This seems
@@ -2916,19 +2914,17 @@
          * we will do our own scanning, if
          *
          *      - The driver is orinoco_cs.  It chokes on "AP_SCAN 1".
          *      - The AP is non-broadcast or Ad-Hoc.  Unless the driver is madwifi.
          */
         
 	if (!strcmp (kernel_driver, "orinoco_cs"))
                	ap_scan = "AP_SCAN 2";
-        else if ((!nm_ap_get_broadcast (ap) || is_adhoc) && strcmp (kernel_driver, "ath_pci"))
-               	ap_scan = "AP_SCAN 2";
-        else if (!nm_ap_get_broadcast (ap) || is_adhoc || !supports_wpa)
+        else if (is_adhoc || !supports_wpa)
 		ap_scan = "AP_SCAN 2";
 	else
                	ap_scan = "AP_SCAN 1";
 
 	/* Tell wpa_supplicant that we'll do the scanning */
 	if (!nm_utils_supplicant_request_with_check (ctrl, "OK", __func__, NULL, ap_scan))
 		goto out;
 
@@ -2955,16 +2951,24 @@
 			"SET_NETWORK %i ssid %s", nwid, hex_essid))
 		goto out;
 
 	/* For non-broadcast networks, we need to set "scan_ssid 1" to scan with probe request frames.
 	 * However, don't try to probe Ad-Hoc networks.
 	 */
 	if (!nm_ap_get_broadcast (ap) && !is_adhoc)
 	{
+		/* 
+		 * since using "AP_SCAN 1" for hidden networks, wpa_supplicant
+		 * does not seem to bring the essid to the device anymore...
+		 * perhaps this is a wpa_supplicant/wext/driver issue or perhaps this
+		 * is simply how it is. We set the ESSID here for now. 
+		 */
+		nm_device_802_11_wireless_set_essid(self, essid);
+
 		if (!nm_utils_supplicant_request_with_check (ctrl, "OK", __func__, NULL,
 				"SET_NETWORK %i scan_ssid 1", nwid))
 			goto out;
 	}
 
 	/* Ad-Hoc ? */
 	if (is_adhoc)
 	{
