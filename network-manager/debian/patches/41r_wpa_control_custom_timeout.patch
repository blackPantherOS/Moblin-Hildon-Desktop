---
 src/wpa_ctrl.c |   26 +++++++++++++++++++++++++-
 src/wpa_ctrl.h |    2 ++
 2 files changed, 27 insertions(+), 1 deletion(-)

Index: network-manager.debian/src/wpa_ctrl.c
===================================================================
--- network-manager.debian.orig/src/wpa_ctrl.c
+++ network-manager.debian/src/wpa_ctrl.c
@@ -41,32 +41,45 @@
 	int s;
 #ifdef CONFIG_CTRL_IFACE_UDP
 	struct sockaddr_in local;
 	struct sockaddr_in dest;
 #else /* CONFIG_CTRL_IFACE_UDP */
 	struct sockaddr_un local;
 	struct sockaddr_un dest;
 #endif /* CONFIG_CTRL_IFACE_UDP */
+  int timeout_sec;
 };
 
+void wpa_ctrl_set_custom_timeout(struct wpa_ctrl *ctrl, int timeout_sec)
+{
+  ctrl->timeout_sec = timeout_sec;
+}
+
+
+void wpa_ctrl_unset_custom_timeout(struct wpa_ctrl *ctrl)
+{
+  ctrl->timeout_sec = 2;
+}
 
 struct wpa_ctrl * wpa_ctrl_open(const char *ctrl_path,
                                 const char *local_path_dir)
 {
 	struct wpa_ctrl *ctrl;
 #ifndef CONFIG_CTRL_IFACE_UDP
 	static int counter = 0;
 #endif /* CONFIG_CTRL_IFACE_UDP */
 
 	ctrl = malloc(sizeof(*ctrl));
 	if (ctrl == NULL)
 		return NULL;
 	memset(ctrl, 0, sizeof(*ctrl));
 
+	ctrl->timeout_sec = 2;
+
 #ifdef CONFIG_CTRL_IFACE_UDP
 	ctrl->s = socket(PF_INET, SOCK_DGRAM, 0);
 	if (ctrl->s < 0) {
 		perror("socket");
 		free(ctrl);
 		return NULL;
 	}
 
@@ -127,29 +140,40 @@
 #ifndef CONFIG_CTRL_IFACE_UDP
 	unlink(ctrl->local.sun_path);
 #endif /* CONFIG_CTRL_IFACE_UDP */
 	close(ctrl->s);
 	free(ctrl);
 }
 
 
+static int wpa_ctrl_request_timed(struct wpa_ctrl *ctrl, const char *cmd, size_t cmd_len,
+				  char *reply, size_t *reply_len, int timeout_sec,
+				  void (*msg_cb)(char *msg, size_t len));
+
 int wpa_ctrl_request(struct wpa_ctrl *ctrl, const char *cmd, size_t cmd_len,
 		     char *reply, size_t *reply_len,
 		     void (*msg_cb)(char *msg, size_t len))
 {
+  return wpa_ctrl_request_timed(ctrl, cmd, cmd_len, reply, reply_len, ctrl->timeout_sec, msg_cb);
+}
+
+static int wpa_ctrl_request_timed(struct wpa_ctrl *ctrl, const char *cmd, size_t cmd_len,
+				  char *reply, size_t *reply_len, int timeout_sec,
+				  void (*msg_cb)(char *msg, size_t len))
+{
 	struct timeval tv;
 	int res;
 	fd_set rfds;
 
 	if (send(ctrl->s, cmd, cmd_len, 0) < 0)
 		return -1;
 
 	for (;;) {
-		tv.tv_sec = 2;
+		tv.tv_sec = timeout_sec;
 		tv.tv_usec = 0;
 		FD_ZERO(&rfds);
 		FD_SET(ctrl->s, &rfds);
 		res = select(ctrl->s + 1, &rfds, NULL, NULL, &tv);
 		if (FD_ISSET(ctrl->s, &rfds)) {
 			res = recv(ctrl->s, reply, *reply_len, 0);
 			if (res < 0)
 				return res;
Index: network-manager.debian/src/wpa_ctrl.h
===================================================================
--- network-manager.debian.orig/src/wpa_ctrl.h
+++ network-manager.debian/src/wpa_ctrl.h
@@ -66,16 +66,18 @@
 /**
  * wpa_ctrl_close - Close a control interface to wpa_supplicant/hostapd
  * @ctrl: Control interface data from wpa_ctrl_open()
  *
  * This function is used to close a control interface.
  */
 void wpa_ctrl_close(struct wpa_ctrl *ctrl);
 
+void wpa_ctrl_set_custom_timeout(struct wpa_ctrl *ctrl, int timeout_sec);
+void wpa_ctrl_unset_custom_timeout(struct wpa_ctrl *ctrl);
 
 /**
  * wpa_ctrl_request - Send a command to wpa_supplicant/hostapd
  * @ctrl: Control interface data from wpa_ctrl_open()
  * @cmd: Command; usually, ASCII text, e.g., "PING"
  * @cmd_len: Length of the cmd in bytes
  * @reply: Buffer for the response
  * @reply_len: Reply buffer length
