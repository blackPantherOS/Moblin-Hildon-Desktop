---
 src/nm-device-802-11-wireless.c |   45 ++++++++++++++++++++++++++++++----------
 1 file changed, 34 insertions(+), 11 deletions(-)

Index: network-manager.debian/src/nm-device-802-11-wireless.c
===================================================================
--- network-manager.debian.orig/src/nm-device-802-11-wireless.c
+++ network-manager.debian/src/nm-device-802-11-wireless.c
@@ -81,16 +81,18 @@
 
 	guint32			failed_link_count;
 	GSource *			link_timeout;
 	gulong			wireless_event_id;
 
 	/* Static options from driver */
 	guint8			we_version;
 	guint32			capabilities;
+
+	guint32			run_count;
 };
 
 
 typedef struct
 {
 	NMDevice80211Wireless *	dev;
 	guint8 *		results;
 	guint32		results_len;
@@ -376,16 +378,17 @@
 static void
 nm_device_802_11_wireless_init (NMDevice80211Wireless * self)
 {
 	self->priv = NM_DEVICE_802_11_WIRELESS_GET_PRIVATE (self);
 	self->priv->dispose_has_run = FALSE;
 	self->priv->is_initialized = FALSE;
 
 	self->priv->supplicant.pid = -1;
+	self->priv->run_count = 0;
 }
 
 static void
 real_init (NMDevice *dev)
 {
 	NMDevice80211Wireless *	self = NM_DEVICE_802_11_WIRELESS (dev);
 	NMData *				app_data;
 	guint32				caps;
@@ -2378,17 +2381,18 @@
  *
  *	This program is free software; you can redistribute it and/or modify it
  *	under the terms of the GNU General Public License as published by the
  *	Free Software Foundation version 2 of the License.
  */
 
 #define WPA_SUPPLICANT_GLOBAL_SOCKET		LOCALSTATEDIR"/run/wpa_supplicant-global"
 #define WPA_SUPPLICANT_CONTROL_SOCKET		LOCALSTATEDIR"/run/wpa_supplicant"
-#define WPA_SUPPLICANT_NUM_RETRIES		20
+#define WPA_SUPPLICANT_MAX_GLOBAL_CONNECT_ATTEMPTS	20
+#define WPA_SUPPLICANT_MAX_CONNECT_ATTEMPTS	20
 #define WPA_SUPPLICANT_RETRY_TIME_US		100*1000
 
 
 static void
 remove_link_timeout (NMDevice80211Wireless *self)
 {
 	g_return_if_fail (self != NULL);
 
@@ -2415,17 +2419,23 @@
 static char *
 supplicant_get_device_socket_path (NMDevice80211Wireless *self)
 {
 	const char *iface;
 
 	g_return_val_if_fail (self != NULL, NULL);
 
 	iface = nm_device_get_iface (NM_DEVICE (self));
-	return g_strdup_printf (WPA_SUPPLICANT_CONTROL_SOCKET "/%s", iface);
+	return g_strdup_printf (WPA_SUPPLICANT_CONTROL_SOCKET "%d/%s", self->priv->run_count, iface);
+}
+
+static char *
+supplicant_get_global_device_socket_path (NMDevice80211Wireless *self)
+{
+	return g_strdup_printf (WPA_SUPPLICANT_GLOBAL_SOCKET "%d", self->priv->run_count);
 }
 
 static void
 supplicant_cleanup (NMDevice80211Wireless *self)
 {
 	char * sock_path;
 
 	g_return_if_fail (self != NULL);
@@ -2468,20 +2478,24 @@
 	}
 
 	supplicant_remove_timeout (self);
 	remove_link_timeout (self);
 
 	/* HACK: should be fixed in wpa_supplicant.  Will likely
 	 * require accomodations for selinux.
 	 */
-	unlink (WPA_SUPPLICANT_GLOBAL_SOCKET);
 	sock_path = supplicant_get_device_socket_path (self);
 	unlink (sock_path);
 	g_free (sock_path);
+	gchar* global_sock_path = supplicant_get_global_device_socket_path(self);
+	unlink (global_sock_path);
+	g_free(global_sock_path);
+
+	self->priv->run_count = (self->priv->run_count + 1) % 10;
 }
 
 static void
 supplicant_watch_done (gpointer user_data)
 {
 	NMDevice80211Wireless *device = NM_DEVICE_802_11_WIRELESS (user_data);
 
 	device->priv->supplicant.watch = NULL;
@@ -2732,17 +2746,17 @@
 {
 	gboolean	success = FALSE;
 	char *	argv[4];
 	GError *	error = NULL;
 	GPid		pid = -1;
 
 	argv[0] = WPA_SUPPLICANT_BIN;
 	argv[1] = "-g";
-	argv[2] = WPA_SUPPLICANT_GLOBAL_SOCKET;
+	argv[2] = supplicant_get_global_device_socket_path(self);
 	argv[3] = NULL;
 
 	success = g_spawn_async ("/", argv, NULL, 0, &supplicant_child_setup, NULL,
 	                         &pid, &error);
 	if (!success)
 	{
 		if (error)
 		{
@@ -2773,26 +2787,28 @@
 
 
 static gboolean
 supplicant_interface_init (NMDevice80211Wireless *self)
 {
 	struct wpa_ctrl *	ctrl = NULL;
 	char *			socket_path;
 	const char *		iface = nm_device_get_iface (NM_DEVICE (self));
-	gboolean			success = FALSE;
-	int				tries = 0;
+	gboolean		success = FALSE;
+	int			global_connect_attempts = 0;
+	int			connect_attempts = 0;
 	const char *            wpa_driver;
 	const char *            kernel_driver;
 
 
 	/* Try to open wpa_supplicant's global control socket */
-	for (tries = 0; tries < WPA_SUPPLICANT_NUM_RETRIES && !ctrl; tries++)
+	for (global_connect_attempts = 0; global_connect_attempts < WPA_SUPPLICANT_NUM_RETRIES && !ctrl; global_connect_attempts++)
 	{
-		ctrl = wpa_ctrl_open (WPA_SUPPLICANT_GLOBAL_SOCKET, NM_RUN_DIR);
+		ctrl = wpa_ctrl_open (supplicant_get_global_device_socket_path(self), NM_RUN_DIR);
+		nm_info ("supplicant_interface_init() - connect to global ctrl socket (%d/10).", global_connect_attempts);
 		g_usleep (WPA_SUPPLICANT_RETRY_TIME_US);
 	}
 
 	if (!ctrl)
 	{
 		nm_info ("Error opening supplicant global control interface.");
 		goto exit;
 	}
@@ -2808,27 +2824,34 @@
                wpa_driver = "madwifi";
         else if (!strcmp (kernel_driver, "hostap_pci") || !strcmp (kernel_driver, "hostap_cs") || !strcmp (kernel_driver, "hostap_plx"))
                wpa_driver = "hostap";
 	else
                wpa_driver = "wext";
 
 	/* wpa_cli -g/var/run/wpa_supplicant-global interface_add eth1 "" wext /var/run/wpa_supplicant */
 	if (!nm_utils_supplicant_request_with_check (ctrl, "OK", __func__, NULL,
-			"INTERFACE_ADD %s\t\t%s\t" WPA_SUPPLICANT_CONTROL_SOCKET "\t", iface, wpa_driver))
+						     "INTERFACE_ADD %s\t\t%s\t" WPA_SUPPLICANT_CONTROL_SOCKET "%d\t", iface, wpa_driver, self->priv->run_count)) {
+                wpa_ctrl_close (ctrl);
 		goto exit;
-	wpa_ctrl_close (ctrl);
+	}
+
+        wpa_ctrl_close (ctrl);
 
 	/* Get a control socket to wpa_supplicant for this interface.
 	 * Try a couple times to work around naive socket naming
 	 * in wpa_ctrl that sometimes collides with stale ones.
 	 */
 	socket_path = supplicant_get_device_socket_path (self);
-	while (!self->priv->supplicant.ctrl && (tries++ < 10))
+	connect_attempts = 0;
+	while (!self->priv->supplicant.ctrl && (connect_attempts++ < 10)) {
+		nm_info ("supplicant_init() - connect to device ctrl socket (%d/10).", connect_attempts);
 		self->priv->supplicant.ctrl = wpa_ctrl_open (socket_path, NM_RUN_DIR);
+		g_usleep (WPA_SUPPLICANT_RETRY_TIME_US);
+	}
 	g_free (socket_path);
 	if (!self->priv->supplicant.ctrl)
 	{
 		nm_info ("Error opening control interface to supplicant.");
 		goto exit;
 	}
 	success = TRUE;
 
